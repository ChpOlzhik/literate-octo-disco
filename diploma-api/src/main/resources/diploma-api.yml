openapi: 3.0.2
info:
  version: 0.0.1
  title: Diploma Service
  description: The Diploma Service
paths:
  /teams:
    get:
      summary: Get team list
      description: Get list of teams
      operationId: getAvailableTeams
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamDto'
      tags: [ Team ]

  /teams/{teamId}:
    get:
      tags: [ Team ]
      description: Get team info by id
      operationId: getTeam
      parameters:
        - in: path
          name: teamId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the team to get
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamDto'

  /teams/create:
    post:
      summary: Creates a new team
      tags: [ Team ]
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateUpdateRequest'
      responses:
        201:
          description: Success

  /teams/update:
    put:
      summary: Updates a team
      tags: [ Team ]
      operationId: updateTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreateUpdateRequest'
      responses:
        204:
          description: Success

  /topics:
    get:
      tags: [ Topic ]
      description: Get list of available topics
      operationId: getAvailableTopics
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicInfoByBlocksDto'

  /topics/{topicId}:
    get:
      tags: [ Topic ]
      summary: Get topic info by id
      operationId: getTopic
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to get
      responses:
        '200':
          description: Status is OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicInfoByBlocksDto'
    delete:
      tags: [ Topic ]
      summary: Delete topic by id
      operationId: deleteTopic
      parameters:
        - in: path
          name: topicId
          schema:
            type: integer
            format: int64
          required: true
          description: Numeric ID of the topic to get
      responses:
        '204':
          description: Deleted
        '404':
          description: id not found
        '401':
          description: Unauthorized


  /topics/create:
    post:
      summary: Creates a new topic
      tags: [ Topic ]
      operationId: createTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateUpdateRequest'
      responses:
        201:
          description: Success

  /topics/update:
    put:
      summary: Updates a topic
      tags: [ Topic ]
      operationId: updateTopic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicCreateUpdateRequest'
      responses:
        204:
          description: Success

  /auth/signup:
    post:
      tags: [ Auth ]
      description: Register user
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        204:
          description: Success

  /auth/verify/{token}:
    get:
      tags: [ Auth ]
      description: Verify account by token
      operationId: verify
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: User's token
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerifyResponse'
          description: Success

  /auth/login:
    post:
      tags: [ Auth ]
      description: Login user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Success

  /auth/refresh/token:
    post:
      tags: [ Auth ]
      description: refresh token
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
          description: Success

  /auth/logout:
    post:
      tags: [ Auth ]
      description: Logout user
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
          description: Success

  /admin/:
    get:
      tags: [ Admin ]
      summary: Get admin-panel info
      operationId: getAdminPageInfo
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminPanelGeneralInfoDto'

components:
  schemas:
    TeamDto:
      description: Team DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        choices:
          type: integer
          format: int64
        confirmed:
          type: boolean

    TopicDto:
      description: Topic DTO
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        selected:
          type: boolean

    TopicInfoByBlocksDto:
      description: Topic of project
      type: object
      properties:
        topic:
          description: Topic
          type: object
          $ref: '#/components/schemas/TopicDto'
        creator:
          $ref: '#/components/schemas/UserDto'
        initial:
          $ref: '#/components/schemas/InitialDto'

    InitialDto:
      description: Group initials
      type: object
      properties:
        id:
          description: Initial id
          type: integer
          format: int64
        initial:
          description: Initial
          type: string

    GroupDto:
      description: Group info's
      type: object
      properties:
        id:
          description: Group id
          type: integer
          format: int64
        name:
          type: string
        initial:
          type: string

    UserInfoByBlocksDto:
      description: User full info
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        role:
          $ref: '#/components/schemas/RoleDto'
        group:
          $ref: '#/components/schemas/GroupDto'

    UserDto:
      description: User info
      type: object
      properties:
        id:
          description: User id
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        email:
          type: string

    RoleDto:
      description: Role info
      type: object
      properties:
        id:
          description: Role id
          type: integer
          format: int64
        name:
          description: Role name
          type: string

    TeamCreateUpdateRequest:
      type: object
      properties:
        teamId:
          type: integer
          format: int64
        name:
          type: string
        topicId:
          type: integer
          format: int64
        advisorId:
          type: integer
          format: int64
        choices:
          type: integer
        confirmed:
          type: boolean
      required:
        - name
        - creatorId

    TopicCreateUpdateRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        initial:
          type: string
      required:
        - creatorId
        - name
        - initial

    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
      required:
        - email
        - username
        - password

    TokenVerifyResponse:
      type: object
      properties:
        message:
          type: string

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    RefreshTokenRequest:
      type: object
      properties:
        token:
          type: string
        username:
          type: string
      required:
        - token
        - password

    RefreshTokenResponse:
      type: object
      properties:
        token:
          type: string

    AuthenticationResponse:
      type: object
      properties:
        authenticationToken:
          type: string
        username:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time

    LogoutResponse:
      type: object
      properties:
        message:
          type: string

    DefenceInfoByBlocksDto:
      type: object
      properties:
        defence:
          $ref: '#/components/schemas/DefenceDto'
        team:
          $ref: '#/components/schemas/TeamDto'
        stage:
          $ref: '#/components/schemas/StageDto'

    DefenceDto:
      type: object
      properties:
        defenceId:
          type: integer
          format: int64
        defenceDate:
          type: string
          format: date-time
        grade:
          type: integer

    StageDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        stage:
          type: string

    QuestionCreateUpdateRequest:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        description:
          type: string
        defenceId:
          type: integer
          format: int64
        grade:
          type: integer

    QuestionDto:
      type: object
      properties:
        questionId:
          type: integer
          format: int64
        description:
          type: string
        questionerId:
          type: integer
          format: int64
        defenceId:
          type: integer
          format: int64
        grade:
          type: integer

    TeamInfoByBlocksDto:
      type: object
      properties:
        team:
          $ref: '#/components/schemas/TeamDto'
        creator:
          $ref: '#/components/schemas/UserDto'
        topic:
          $ref: '#/components/schemas/TopicDto'
        advisor:
          $ref: '#/components/schemas/UserDto'

    AdminPanelGeneralInfoDto:
      type: object
      properties:
        defences:
          type: array
          items:
            $ref: '#/components/schemas/DefenceInfoByBlocksDto'
        teams:
          type: array
          items:
            $ref: '#/components/schemas/TeamInfoByBlocksDto'
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicInfoByBlocksDto'
        stages:
          type: array
          items:
            $ref: '#/components/schemas/StageDto'
        initials:
          type: array
          items:
            $ref: '#/components/schemas/InitialDto'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfoByBlocksDto'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDto'